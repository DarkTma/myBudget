package com.example.mybudget1;

import android.animation.ObjectAnimator;
import android.animation.ValueAnimator;
import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Color;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.view.View;
import android.view.animation.LinearInterpolator;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.NumberPicker;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.OnBackPressedCallback;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import okhttp3.MediaType;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class GeminiChatActivity extends AppCompatActivity {

    private RecyclerView recyclerViewChat;
    private ChatAdapter chatAdapter;
    private List<ChatMessage> chatMessages;
    private TextView textStatus;
    private FrameLayout progressOverlay;
    private ImageView animatedSpinner;
    private ObjectAnimator rotationAnimator;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_gemini_chat);

        OnBackPressedCallback callback = new OnBackPressedCallback(true /* enabled by default */) {
            @Override
            public void handleOnBackPressed() {
                Intent intentGoBack = new Intent(GeminiChatActivity.this, StartActivity.class);
                startActivity(intentGoBack);
            }
        };
        this.getOnBackPressedDispatcher().addCallback(this, callback);

        @SuppressLint({"MissingInflatedId", "LocalSuppress"}) ImageButton btnBack = findViewById(R.id.buttonBackFromAnaliz);
        btnBack.setOnClickListener(v -> {
            Intent intentGoBack = new Intent(GeminiChatActivity.this, StartActivity.class);
            startActivity(intentGoBack);
        });

        recyclerViewChat = findViewById(R.id.recyclerViewChat);
        recyclerViewChat.setLayoutManager(new LinearLayoutManager(this));
        chatMessages = new ArrayList<>();
        chatAdapter = new ChatAdapter(this , chatMessages);
        recyclerViewChat.setAdapter(chatAdapter);

        findViewById(R.id.buttonMonth).setOnClickListener(v -> sendCommand("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"));
        findViewById(R.id.buttonWeek).setOnClickListener(v -> getCategoriesMessage());
        findViewById(R.id.buttonAll).setOnClickListener(v -> showSelectStartEndDayDialog());

        textStatus = findViewById(R.id.textStatus);
        checkConnectionStatus();

        initFakeProgress();
    }

    private void checkConnectionStatus() {
        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
        boolean isConnected = activeNetwork != null && activeNetwork.isConnectedOrConnecting();

        if (isConnected) {
            textStatus.setText("–û–Ω–ª–∞–π–Ω");
            textStatus.setTextColor(Color.parseColor("#4CAF50")); // –∑–µ–ª—ë–Ω—ã–π
        } else {
            textStatus.setText("–û—Ñ—Ñ–ª–∞–π–Ω");
            textStatus.setTextColor(Color.parseColor("#F44336")); // –∫—Ä–∞—Å–Ω—ã–π
        }
    }

    public void getCategoriesMessage() {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ FileHelper
        FileHelper fileHelper = new FileHelper(this);
        List<CategoryItem> categories = fileHelper.getCategoriesWithPrices(1);

        if (categories.isEmpty()) {
            new AlertDialog.Builder(this)
                    .setTitle("–û—à–∏–±–∫–∞")
                    .setMessage("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    .setPositiveButton("–û–∫", null)
                    .show();
            return;
        }

        List<String> categoryNames = new ArrayList<>();
        for (CategoryItem category : categories) {
            categoryNames.add(category.getName());
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        new AlertDialog.Builder(this)
                .setTitle("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
                .setItems(categoryNames.toArray(new String[0]), (dialog, which) -> {
                    CategoryItem selectedCategory = categories.get(which);
                    sendCommand(sendCategoryAnaliz(selectedCategory));
                })
                .setCancelable(true)
                .show();
    }


    private String sendCategoryAnaliz(CategoryItem selectedCategory) {
        DatabaseHelper databaseHelper = new DatabaseHelper(this);
        List<ExpenseData> data = databaseHelper.getExpensesByCategory(selectedCategory.getId() , 1);

        DatabaseHelper2 databaseIncome = new DatabaseHelper2(this);
        FileHelper fileHelper = new FileHelper(this);
        CursData curs = CursHelper.getCursData(databaseIncome.getDefaultCurrency());

        String userText = "";
        for (ExpenseData expense : data) {
            userText += "- " + expense.getName() + ": " + expense.getDate() + " , " + expense.getAmount() + curs.symbol + "\n";
        }

        return "–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '" + selectedCategory.getName() + "':\n\n" +
                userText + "\n\n" +
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ —Ä–∞—Å—Ö–æ–¥—ã –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.\n" +
                "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, –≥–¥–µ —Ç—Ä–∞—Ç—ã —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–ø–æ—Å–æ–±—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏. üòä\n" +
                "–ï—Å–ª–∏ –µ—Å—Ç—å, –æ—Ç–º–µ—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã. ‚ú®\n" +
                "–î–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∞—Å—Ö–æ–¥–∞–º–∏.\n" +
                "–°—Ç–∏–ª—å: –ª—ë–≥–∫–∏–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, –Ω–æ –±–µ–∑ –ª–∏—à–Ω–µ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.\n" +
                "–í –∫–æ–Ω—Ü–µ –ø–æ–¥—ã—Ç–æ–∂—å –∫–æ—Ä–æ—Ç–∫–∏–º —Å–æ–≤–µ—Ç–æ–º –Ω–∞ –±—É–¥—É—â–µ–µ.\n" +
                "–æ—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–ø–ª—å—à–µ 3000 –∏–º–≤–æ–ª–æ–≤";

    }


    private void sendCommand(String commandText) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if(commandText.startsWith("–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")){
            chatMessages.add(new ChatMessage("–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", true));
        } else if (commandText.startsWith("–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö")) {
            chatMessages.add(new ChatMessage("–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö", true));
        } else {
            chatMessages.add(new ChatMessage(commandText, true));
        }
        chatAdapter.notifyItemInserted(chatMessages.size() - 1);
        recyclerViewChat.scrollToPosition(chatMessages.size() - 1);

        if (commandText.equals("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü")) {
            getGeminiResponse(generateFriendlyPrompt(getFormatedMonthString()));
        }else if(commandText.startsWith("–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")){
            getGeminiResponse(commandText);
        }else if(commandText.startsWith("–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö")){
            getGeminiResponse(commandText);
        }

    }


    private void testFakeProgress() {
        startFakeProcess();
        new Handler(Looper.getMainLooper()).postDelayed(() -> {
            stopFakeProcess();
        }, 1000);
    }


    private void getGeminiResponse(String userText) {
        startFakeProcess();
        String apiKey = "AIzaSyDoiw93HSlRXadNii78dlZDXCSIwcmcjOc";  // –¢–≤–æ–π API-–∫–ª—é—á
        String promptText = userText;

        JsonObject textPart = new JsonObject();
        textPart.addProperty("text", promptText);

        JsonArray partsArray = new JsonArray();
        partsArray.add(textPart);

        JsonObject userContent = new JsonObject();
        userContent.addProperty("role", "user");
        userContent.add("parts", partsArray);

        JsonArray contentsArray = new JsonArray();
        contentsArray.add(userContent);

        JsonObject requestData = new JsonObject();
        requestData.add("contents", contentsArray);

        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://generativelanguage.googleapis.com/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();

        GeminiService service = retrofit.create(GeminiService.class);

        MediaType mediaType = MediaType.parse("application/json");
        RequestBody requestBody = RequestBody.create(mediaType, new Gson().toJson(requestData));

        Call<GeminiResponse> call = service.generateResponse(apiKey, requestBody);

        call.enqueue(new Callback<GeminiResponse>() {
            @Override
            public void onResponse(Call<GeminiResponse> call, Response<GeminiResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    String result = response.body().getCandidates().get(0).getContent().getParts().get(0).getText();
                    stopFakeProcess();
                    runOnUiThread(() -> {
                        chatMessages.add(new ChatMessage(result, false));
                        chatAdapter.notifyItemInserted(chatMessages.size() - 1);
                        recyclerViewChat.scrollToPosition(chatMessages.size() - 1);
                    });
                } else {
                    try {
                        String errorBody = response.errorBody().string();
                        stopFakeProcess();
                        Log.e("Gemini Error", errorBody);

                        runOnUiThread(() -> {
                            chatMessages.add(new ChatMessage("–û—à–∏–±–∫–∞ Gemini: " + errorBody, false));
                            chatAdapter.notifyItemInserted(chatMessages.size() - 1);
                            recyclerViewChat.scrollToPosition(chatMessages.size() - 1);
                        });
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }

            @Override
            public void onFailure(Call<GeminiResponse> call, Throwable t) {
                stopFakeProcess();
                t.printStackTrace();

                runOnUiThread(() -> {
                    chatMessages.add(new ChatMessage("–û—à–∏–±–∫–∞ Gemini: " + t.getMessage(), false));
                    chatAdapter.notifyItemInserted(chatMessages.size() - 1);
                    recyclerViewChat.scrollToPosition(chatMessages.size() - 1);
                });
            }
        });
    }

    private String generateFriendlyPrompt(String userText) {
        return "–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ç—Ä–∞—Ç–∞—Ö:\n\n" +
                userText + "\n\n" +
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–µ–º–Ω–æ–≥–æ –º–∏–ª—ã–π, –Ω–æ –±–µ–∑ –ª–∏—à–Ω–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑.\n" +
                "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, –≥–¥–µ —Ç—Ä–∞—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ, –≥–¥–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å. –ï—Å–ª–∏ –¥–æ—Ö–æ–¥—ã —Ö–æ—Ä–æ—à–∏–µ ‚Äî –ø–æ—Ö–≤–∞–ª–∏ –ª–µ–≥–∫–æ –∏ –ø—Ä–∏—è—Ç–Ω–æ.\n" +
                "–î–∞–π –ª—é–±—ã–µ —Ä–∞–∑—É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Å—è).\n" +
                "–ü–∏—à–∏ –∫–∞–∫ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –Ω–æ –±–µ–∑ —á—Ä–µ–∑–º–µ—Ä–Ω–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏. –°—Ç–∏–ª—å: —á—É—Ç—å –º–∏–ª–æ, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É.\n" +
                "–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –ª—ë–≥–∫–æ–µ –æ–±–æ–±—â–µ–Ω–∏–µ –∏ –º—è–≥–∫–∏–π —Å–æ–≤–µ—Ç –Ω–∞ –±—É–¥—É—â–µ–µ.\n" +
                "–æ—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–ø–ª—å—à–µ 3000 –∏–º–≤–æ–ª–æ–≤";
    }





    public String getFormattedExpenseString(int i) {
        DatabaseHelper databaseHelper = new DatabaseHelper(this);
        DatabaseHelper2 databaseIncome = new DatabaseHelper2(this);
        FileHelper fileHelper = new FileHelper(this);
        CursData curs = CursHelper.getCursData(databaseIncome.getDefaultCurrency());
        List<CategoryItem> categories = fileHelper.getCategoriesWithPrices(i);

        // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
        Calendar calendar = Calendar.getInstance();
        int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
        StringBuilder result = new StringBuilder();
        result.append("–°–µ–≥–æ–¥–Ω—è: ").append(dayOfMonth).append(" —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ç—Ä–∞—Ç—ã –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è: ");

        for (CategoryItem category : categories) {
            result.append(category.getName()).append(" - ").append(category.getPrice()).append(curs.symbol).append(", ");
        }

        List<ExpenseData> data = databaseHelper.getExpensesByCategory(0 , 1);

        result.append(", –ø–æ–¥ other –ø–æ–¥—Ä–æ–∑—É–º–µ–≤–∞—é—Ç—Å—è —Ç—Ä–∞—Ç—ã: ");
        for (ExpenseData expense : data) {
            result.append(" - ").append(expense.getName()).append(": ").append(expense.getDate()).append(" , ").append(expense.getAmount()).append(curs.symbol).append("\n");
        }

        // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø—è—Ç—É—é –∏ –ø—Ä–æ–±–µ–ª
        if (result.length() > 0 && result.charAt(result.length() - 1) == ' ') {
            result.delete(result.length() - 2, result.length());
        }

        return result.toString();
    }

    public void showSelectStartEndDayDialog() {
        // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
        Calendar calendar = Calendar.getInstance();
        int maxDay = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);


        int currentDay = calendar.get(Calendar.DAY_OF_MONTH);


        int startDayValue = currentDay - 2;
        int endDayValue = currentDay;


        if (startDayValue < 1) {
            startDayValue = 1;
        }

        final int[] startDay = {1};
        final int[] endDay = {1};

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å");

        // –ü–µ—Ä–≤–æ–µ –ø–æ–ª–µ: –í—ã–±–æ—Ä —Å—Ç–∞—Ä—Ç–∞
        LinearLayout layout = new LinearLayout(this);
        layout.setOrientation(LinearLayout.VERTICAL);
        layout.setPadding(50, 40, 50, 10);

        TextView startLabel = new TextView(this);
        startLabel.setText("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–Ω—å:");

        NumberPicker startPicker = new NumberPicker(this);
        startPicker.setMinValue(1);
        startPicker.setMaxValue(maxDay);
        startPicker.setValue(startDayValue);

        TextView endLabel = new TextView(this);
        endLabel.setText("–ö–æ–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å:");

        NumberPicker endPicker = new NumberPicker(this);
        endPicker.setMinValue(1);
        endPicker.setMaxValue(maxDay);
        endPicker.setValue(endDayValue);

        layout.addView(startLabel);
        layout.addView(startPicker);
        layout.addView(endLabel);
        layout.addView(endPicker);

        builder.setView(layout);

        builder.setPositiveButton("–í—ã–±—Ä–∞—Ç—å", (dialog, which) -> {
            startDay[0] = startPicker.getValue();
            endDay[0] = endPicker.getValue();

            if (startDay[0] > endDay[0]) {
                Toast.makeText(this, "–ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ!", Toast.LENGTH_SHORT).show();
                return;
            }

            if (endDay[0] - startDay[0] > 7) {
                Toast.makeText(this, "–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 7 –¥–Ω–µ–π!", Toast.LENGTH_SHORT).show();
                return;
            }

            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ startDay –∏ endDay
            String text = getFormatedWeekString(startDay[0], endDay[0]);
            sendCommand(text);

        });

        builder.setNegativeButton("–û—Ç–º–µ–Ω–∞", null);
        builder.show();
    }




    public String getFormatedWeekString(int startDay , int endDay){
        DatabaseHelper databaseHelper = new DatabaseHelper(this);
        Cursor cursor = databaseHelper.getDoneSpentsCursor(startDay, endDay);

        DatabaseHelper2 databaseIncome = new DatabaseHelper2(this);
        CursData curs = CursHelper.getCursData(databaseIncome.getDefaultCurrency());

        if (cursor == null || !cursor.moveToFirst()) {
            return "–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.";
        }

        StringBuilder userText = new StringBuilder();
        double totalSpent = 0;



        do {
            int day = cursor.getInt(cursor.getColumnIndexOrThrow("day"));
            String name = cursor.getString(cursor.getColumnIndexOrThrow("name"));
            double spent = cursor.getDouble(cursor.getColumnIndexOrThrow("spent"));

            userText.append("–î–µ–Ω—å ").append(day).append(": ")
                    .append(name).append(" - ")
                    .append(spent).append(curs.symbol).append("\n");

            totalSpent += spent;
        } while (cursor.moveToNext());

        cursor.close();

        int maxLength = 200;  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞

        String formattedUserText = userText.length() > maxLength ? userText.substring(0, maxLength) + "..." : userText.toString();

        return "–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö —Å " + startDay + " –ø–æ " + endDay + " —á–∏—Å–ª–æ:\n\n" +
                formattedUserText  + "\n" +
                "–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: " + totalSpent + curs.symbol + ".\n\n" +
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —ç—Ç–∏ —Ä–∞—Å—Ö–æ–¥—ã. üòä\n" +
                "–ï—Å—Ç—å –ª–∏ —Ç—Ä–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å? –ö–∞–∫–∏–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã–¥–µ–ª—è—é—Ç—Å—è –∫–∞–∫ –æ—Å–æ–±–µ–Ω–Ω–æ –∫—Ä—É–ø–Ω—ã–µ?\n" +
                "–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç–º–µ—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å. ‚ú®\n" +
                "–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π." +
                "–æ—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–ø–ª—å—à–µ 3000 –∏–º–≤–æ–ª–æ–≤";

    }

    public String getFormatedMonthString(){
        DatabaseHelper databaseHelper = new DatabaseHelper(this);
        DatabaseHelper2 databaseIncome = new DatabaseHelper2(this);
        FileHelper fileHelper = new FileHelper(this);
        CursData curs = CursHelper.getCursData(databaseIncome.getDefaultCurrency());
        String oldpart = getFormattedExpenseString(1);
        List<MonthDetailData> detailList;
        detailList = databaseHelper.getIncomesAndMonthlySpents();
        StringBuilder incomePart = new StringBuilder("–î–æ—Ö–æ–¥—ã –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è ‚Äî ");
        StringBuilder spentPart = new StringBuilder("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è ‚Äî ");

        boolean hasIncome = false;
        boolean hasSpent = false;

        for (MonthDetailData item : detailList) {
            if ("Income".equals(item.getType())) {
                incomePart.append(item.getName())
                        .append(": ")
                        .append((int)item.getAmount())
                        .append(curs.symbol)
                        .append(" , ");
                hasIncome = true;
            } else if ("MSpent".equals(item.getType())) {
                spentPart.append(item.getName())
                        .append(": ")
                        .append((int)item.getAmount())
                        .append(curs.symbol)
                        .append(" , ");
                hasSpent = true;
            }
        }

        if (hasIncome) {
            int last = incomePart.length();
            incomePart.replace(last - 2, last, ".");
        } else {
            incomePart.append("–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
        }

        if (hasSpent) {
            int last = spentPart.length();
            spentPart.replace(last - 2, last, ".");
        } else {
            spentPart.append("–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
        }

        return oldpart + incomePart.toString() + " " + spentPart.toString();
    }


    private void initFakeProgress() {
        progressOverlay = findViewById(R.id.progressOverlay);
        animatedSpinner = findViewById(R.id.animatedSpinner);
    }

    private void startFakeProcess() {
        progressOverlay.setAlpha(0f);
        progressOverlay.setVisibility(View.VISIBLE);
        progressOverlay.animate().alpha(1f).setDuration(250).start();

        rotationAnimator = ObjectAnimator.ofFloat(animatedSpinner, "rotation", 0f, 360f);
        rotationAnimator.setDuration(1000);
        rotationAnimator.setRepeatCount(ValueAnimator.INFINITE);
        rotationAnimator.setInterpolator(new LinearInterpolator());
        rotationAnimator.start();
    }

    private void stopFakeProcess() {
        progressOverlay.animate().alpha(0f).setDuration(250).withEndAction(() -> {
            progressOverlay.setVisibility(View.GONE);
        }).start();

        if (rotationAnimator != null && rotationAnimator.isRunning()) {
            rotationAnimator.cancel();
        }
    }

}


